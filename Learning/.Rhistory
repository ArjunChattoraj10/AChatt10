tags$p("This is also a webpage."),
tags$p("You can", tags$strong("nest tags"), "inside other tags"),
tags$hr(),
tags$img(height = 40.5*4, width = 72*4,
src = "https://cdn.theatlantic.com/thumbor/pN25nhF1hatn7QpckNtABKwzmoI=/0x61:1000x624/720x405/media/old_wire/img/upload/2013/03/18/happydog/original.jpg")
)
server <- function(input,output){}
shinyApp(ui = ui, server = server)
40.5*4
72*4
library(shiny)
ui <- fluidPage(
tags$p("This is a Shiny app."),
tags$p("This is also a webpage."),
tags$p("You can", tags$strong("nest tags"), "inside other tags"),
tags$hr(),
tags$img(height = 162, width = 288,
src = "https://cdn.theatlantic.com/thumbor/pN25nhF1hatn7QpckNtABKwzmoI=/0x61:1000x624/720x405/media/old_wire/img/upload/2013/03/18/happydog/original.jpg")
)
server <- function(input,output){}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tags$p("This is a Shiny app."),
tags$p("This is also a webpage."),
tags$p("You can", tags$strong("nest tags"), "inside other tags"),
tags$hr(),
tags$img(height = 162, width = 288,
src = "https://cdn.theatlantic.com/thumbor/pN25nhF1hatn7QpckNtABKwzmoI=/0x61:1000x624/720x405/media/old_wire/img/upload/2013/03/18/happydog/original.jpg")
)
server <- function(input,output){}
shinyApp(ui = ui, server = server)
<a href = "https://shiny.rstudio.com/gallery/#user-showcase"Shiny Showcase</a></p>
</div>
remove(server)
remove(ui)
fluidpage(
h1("My Shiny App"),
p(style = "font-family:Impact", "See other apps in the",
a("Shiny Showcase", href = "https://shiny.rstudio.com/gallery/#user-showcase")
)
)
fluidPage(
h1("My Shiny App"),
p(style = "font-family:Impact", "See other apps in the",
a("Shiny Showcase", href = "https://shiny.rstudio.com/gallery/#user-showcase")
)
)
fluidPage(
h1("My Shiny App"),
p(style = "font-family:Impact", "See other apps in the",
a("Shiny Showcase", href = "https://shiny.rstudio.com/gallery/#user-showcase")
)
)
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
library(shiny)
ui <- fluidPage(
<div class = "container-fluid">
library(shiny)
ui <- fluidPage(
HTML(
'<div class = "container-fluid">
<h1> My Shiny App</h1>
<p style = "font-family:Impact">See other apps in the
<a href = "https://shiny.rstudio.com/gallery/#user-showcase">Shiny Showcase</a></p>
</div>'
)
)
server <- function(input,output){}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
fluidRow(
column(3),
column(5, sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
),
fluidRow(
column(4, offset = 8, plotOutput("hist"))
)
)
server <- function(input,output){
output$hist <- renderPlot({
hist(input$num, main = input$title, col = "maroon")
})
}
library(shiny)
ui <- fluidPage(
fluidRow(
column(3),
column(5, sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
),
fluidRow(
column(4, offset = 8, plotOutput("hist"))
)
)
server <- function(input,output){
output$hist <- renderPlot({
hist(input$num, main = input$title, col = "maroon")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
fluidRow(
column(3),
column(5, sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
),
fluidRow(
column(4, offset = 8, plotOutput(outputId = "hist"))
)
)
server <- function(input,output){
output$hist <- renderPlot({
hist(input$num, main = input$title, col = "maroon")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
fluidRow(
column(3),
column(5, sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
),
plotOutput(outputId = "hist")
)
server <- function(input,output){
output$hist <- renderPlot({
hist(input$num, main = input$title, col = "maroon")
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
library(shiny)
ui <- fluidPage(
fluidRow(
column(3),
column(5, sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100))
),
fluidRow(
column(4, offset = 8, plotOutput(outputId = "hist"))
)
)
server <- function(input,output){
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title, col = "maroon")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Histogram of Random Normal Values"),
actionButton(inputId = "go",
label = "Update"),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input,output){
data <- eventReactive(input$go, {
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate({input$title}), col = "maroon")
})
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
wellPanel(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Histogram of Random Normal Values"),
actionButton(inputId = "go",
label = "Update")
),
plotOutput("hist"),
verbatimTextOutput("stats")
)
server <- function(input,output){
data <- eventReactive(input$go, {
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data(), main = isolate({input$title}), col = "maroon")
})
output$stats = renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(title = "Random generator",
tabsetPanel(
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
runApp('C:/Users/HP/OneDrive/Arjun/Learning')
library(shiny)
ui <- fluidPage(title = "Random generator",
tabsetPanel(
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "maroon", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "dodgerblue", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "chartreuse2", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
library(shiny)
ui <- fluidPage(title = "Random generator",
navlistPanel(
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "maroon", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "dodgerblue", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "chartreuse2", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
textInput(inputId = "title",
label = "Write a title",
value = "Histogram of Random Normal Values")
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- navbarPage(title = "Random generator",
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "maroon", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "dodgerblue", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "charteuse3", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
library(shiny)
ui <- navbarPage(title = "Random generator",
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "maroon", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "dodgerblue", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "chartreuse3", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
library(shiny)
ui <- navbarPage(title = "Random generator",
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
navbarMenu(title = "Other data",
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "grey", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
library(shiny)
ui <- navbarPage(title = "Random generator",
tabPanel(title = "Normal data",
plotOutput("norm"),
actionButton("renorm", "Resample")
),
navbarMenu(title = "Other data",
tabPanel(title = "Uniform data",
plotOutput("unif"),
actionButton("reunif", "Resample")
),
tabPanel(title = "Chi Squared data",
plotOutput("chisq"),
actionButton("rechisq", "Resample")
)
)
)
server <- function(input, output) {
rv <- reactiveValues(
norm = rnorm(500),
unif = runif(500),
chisq = rchisq(500, 2))
observeEvent(input$renorm, { rv$norm <- rnorm(500) })
observeEvent(input$reunif, { rv$unif <- runif(500) })
observeEvent(input$rechisq, { rv$chisq <- rchisq(500, 2) })
output$norm <- renderPlot({
hist(rv$norm, breaks = 30, col = "maroon", border = "white",
main = "500 random draws from a standard normal distribution")
})
output$unif <- renderPlot({
hist(rv$unif, breaks = 30, col = "dodgerblue", border = "white",
main = "500 random draws from a standard uniform distribution")
})
output$chisq <- renderPlot({
hist(rv$chisq, breaks = 30, col = "chartreuse3", border = "white",
main = "500 random draws from a Chi Square distribution with two degree of freedom")
})
}
shinyApp(server = server, ui = ui)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
getwd()
setwd("~/")
setwd("C:/Users/HP/OneDrive/Arjun/Learning")
